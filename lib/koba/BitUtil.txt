package koba;

public static final class BitUtil{
	polymorphic[T=byte,short,int,long]
	public static int bitCount(T value){
		return bitCountInternal((long)value);
	}
	polymorphic[T=byte,short,int,long]
	public static int bitCountAsUnsigned(T value){
		return bitCountInternal((long)value&(2*(long)T.MAX_VALUE+1));
	}
	public static int bitCountInternal(long i){
		//copied from Long.bitCount(long i) in Java API
		i = i - ((i >>> 1) & 0x5555555555555555L);
		i = (i & 0x3333333333333333L) + ((i >>> 2) & 0x3333333333333333L);
		i = (i + (i >>> 4)) & 0x0f0f0f0f0f0f0f0fL;
		i = i + (i >>> 8);
		i = i + (i >>> 16);
		i = i + (i >>> 32);
		return (int)i & 0x7f;
	}
}
