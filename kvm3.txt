命令は32bit,下位v bitがopcodeに相当、それ以外がoperandに相当


st0:スタックの一番上 st1:2番目 ...
ar0:引数0,.. (命令との対応は示す)
pc: ジャンプ先の場所(相対アドレス、命令に含まれることになる)
命令に使用されたスタックのデータは通常消される。

(0)EXIT
code=0x3f 終了

(1)ロード
LD? 指定した値をスタックに積む。変数または定数を積む。

LDC 定数を積む。(定数プールから、あるいは直接)
 LDC.im ar0 (code=ar0<<8|0):整数ar0を積む(ar0は-0x800000以上0x7fffff以下の整数)
 LDC.cp st0 ar0 (code=ar0<<8|0x1):st0(string)で指定したクラス内の定数プールのar0番のデータ(int,real,string,objectなど)を積む。(ar0は0xffffff以下のindexだが、そこまで大きくなることは無いはず)
　LDC.cp.cur ar0 (code=ar0<<8|0x2):CPUが現在実行しているクラスの定数プールからLDC.cpと同じことをする。
 LDC.null (code=???):nullを積む。
LDV 変数を積む。(変数用スタックから)
 LDV ar0 (code=ar0<<8|3):変数用スタックのar0番の変数をスタックに積む

GETFIELD 指定したオブジェクトのメンバを取得、スタックに積む
 GETFIELD st0 st1 (code=0x4) st0(object)のst1(object,String(ascii))という名前の変数を取得。



(2)ストア
STV 指定した値を変数に格納
 STV st0 ar0:(code=ar0<<8|5)変数スタックのar0番にst0を格納。型が合わなければエラー。

SETFIELD 指定したオブジェクトのメンバを設定
 SETFIELD st0 st1 st2 (code=0x6) st0(object)のst1(object,String)という名前の変数にst2を設定する。型が違ったらエラー。

(3)スタック操作
 DUP スタックの要素を複製して積む
　DUP ar0 (code=ar0<<8|7):スタックの上からar0番目(0-indexed)をシャロウコピーして積む

 SWAP ar0 ar1(code=ar0<<8|ar1<<20|0x8):スタックの上からar0番目とar1番目を入れ替える
 
(4)演算

ADD 加算
 ADD st0 st1(code=0x9 or 0x109) code>>8!==0のときは整数の演算、それ以外は実数の演算
SUB 減算
 SUB st0 st1(code=0xa)　code>>8!==0のときは整数の演算、それ以外は実数の演算
MUL 乗算
 MUL st0 st1(code=0xb)　code>>8!==0のときは整数の演算、それ以外は実数の演算
DIV 除算
 DIV st0 st1(code=0xc)整数の除算、商と余りをこの順でスタックに積む
 DIV st0 st1(code=0x10c) 実数の演算、余りなし


(5)呼び出し
CALL
 CALL ar0 ar1(code=ar0<<8|ar1<<20|0xd):この命令の終端+ar0の位置のルーチンを呼び出す。変数テーブルのサイズはar1
 CALL.st ar0 st0 st1 st2...(code=ar0<<8|0xe):st0で指定された名前のクラスに存在するst1で指定された名前の静的関数を呼び出す。引数はst2以降ar0個。
 CALL.in st0 st1(code=0xf):st0のオブジェクトのst1で指定された名前のメソッドを呼び出す

JMP
 JMP ar0(code=ar0<<8|0x10)
RET
 RET (code=0x11 or 0x111) (code>>>8)!=0ならば戻り値のあるRET
(6)比較
 CMP.lt st0 st1(code=0x12):整数st0とst1に対し、st0<st1であればtrueを積む
 CMP.eq st0 st1 (code=0x13):st0とst1が同じ種類(int,real,object,bool)の値であり、等しければtrueを積む
 CMP.null st0(code=???):st0がnullであればtrue
(7)ビット演算
 AND.i st0 st1(code=0x14):整数st0とst1に対し、st0&st1を積む。
 OR.i st0 st1(code=0x15):整数st0とst1に対し、st0|st1を積む。
 XOR.i st0 st1(code=0x16):整数st0とst1に対し、st0^st1を積む。
 NOT.i st0(code=0x17):整数st0に対し、~st0を積む。
 AND.b st0 st1(code=0x18):bool値st0とst1に対し、st0&st1を積む。
 OR.b st0 st1(code=0x19):bool値st0とst1に対し、st0|st1を積む。
 XOR.b st0 st1(code=0x1a):bool値st0とst1に対し、st0^st1を積む。
 NOT.b st0(code=0x1b):bool値st0に対し、!st0を積む
 SHL st0 st1(code=0x1c):整数st0とst1に対し、st0<<(st1%64)を積む。
 SHR st0 st1(code=0x1d):整数st0とst1に対し、st0>>>(st1%64)を積む。(符号なし)
 SAR st0 st1(code=0x1e):整数st0とst1に対し、st0>>(st1%64)を積む。(符号付き)
(8)分岐
 JC ar0 st0(code=0x1f):bool値st0に対して、st0==trueであればpc+ar0にジャンプする。
　
 //COND st0 st1 st2(code=???):st0がtrueであればst1を、falseであればst2を積む。実装するかどうかは未定。
